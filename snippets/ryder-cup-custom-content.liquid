<style>
  .front-swatch,
  .back-swatch,
  .button-group--left-sleeve--custom,
  .button-group--right-sleeve--custom {
    border: 2px solid transparent;
    padding: 2px;
    margin: 2px;
    cursor: pointer;
    background: none;
    width: 80px;
    height: 80px;
  }

  .front-swatch img,
  .back-swatch img,
  .button-group--left-sleeve--custom img,
  .button-group--right-sleeve--custom img {
    width: 100%;
    height: 100%;
    object-fit: contain;
  }

  .front-swatch.active,
  .back-swatch.active,
  .button-group--left-sleeve--custom.active,
  .button-group--right-sleeve--custom.active {
    border-color: #000;
  }

  .back-swatches-group,
  .left-sleeve-button-group-wrapper,
  .right-sleeve-button-group-wrapper {
    display: none;
    flex-wrap: wrap;
    gap: 5px;
  }

  .back-swatches-group.active,
  .left-sleeve-button-group-wrapper.active,
  .right-sleeve-button-group-wrapper.active {
    display: flex;
  }

  .left-sleeve-designs,
  .right-sleeve-designs {
    display: none;
  }

  .left-sleeve-designs.active,
  .right-sleeve-designs.active {
    display: block;
  }

  /* Ensure only the first .pdp-media is visible in desktop stack */
  .info-media-stack-wrapper .pdp-media {
    display: none;
  }
  .info-media-stack-wrapper .pdp-media:first-child {
    display: block;
  }
  .ryder-container--custom{
    color: var(--Content-Base-main, #1F2937);
    font-family: var(--font-family-Title, Gotham);
    font-size: var(--Font-Size-Paragraph-Medium, 14px);
    font-style: normal;
    font-weight: 700;
    line-height: var(--Line-Height-Paragraph-Medium, 22px);
    text-transform: uppercase;
    margin: 0 0 12px;  
  }
  .linked-product-container--custom{
    display: flex;
    gap: 6px;
    align-items: center;
    justify-content: left;
    p{
      color: #4B5563;
      font-size: 14px;
      line-height: 22px;
      transition: all 0.3s;
      text-transform: uppercase;
      margin: 0;  
    }
  }
  .ryder-cup--custom--blocks{
    margin-block: 16px;
  }
</style>


{% assign ryder_cup_link_products = product.metafields.custom.ryder_cup_linked_products.value %}
<div class="ryder-cup--custom--blocks">
    <div class="ryder-container--custom">Color:</div>
    <div class="linked-product-container--custom">
    {% if ryder_cup_link_products %}
        {% for product in ryder_cup_link_products %}
        <div class="linked-product-wrapper--custom">
            <a class="linked-product-link--custom" href="{{ product.url }}">
            {% if product.featured_image %}
                {{
                product.featured_image
                | image_url: width: 60
                | image_tag: class: 'linked-product-featured-img--custom'
                }}
            {% endif %}
            <p>{{ product.title | split: '|' | last }}</p>
            </a>
        </div>
        {% endfor %}
    {% endif %}
    </div>
</div>

{% assign ryder_cup = product.metafields.custom.ryder_cup.value %}
{% assign first_group = ryder_cup | first %}
{% assign has_left_sleeve = first_group.left_sleeve %}
{% assign has_right_sleeve = first_group.right_sleeve %}
{% assign has_back = first_group.back_image_for_swatch %}

<div class="ryder-cup-selector">
  <!-- FRONT DESIGN SWATCHES -->
  <div class="front-designs ryder-cup--custom--blocks">
    <p class="ryder-container--custom">Select Front Design:</p>
    <div class="front-swatches">
      {% for group in ryder_cup %}
        <button
          class="front-swatch {% if forloop.first %}active{% endif %}"
          data-group-index="{{ forloop.index0 }}"
          data-front-image="{{ group.front_image | image_url }}"
          data-front-logo-placement="{{ group.front_logo_placement }}"
          data-has-left-sleeve="{% if group.left_sleeve %}true{% else %}false{% endif %}"
          data-has-right-sleeve="{% if group.right_sleeve %}true{% else %}false{% endif %}"
        >
          <img src="{{ group.front_image_for_swatch | img_url: '100x100' }}" alt="Front Swatch {{ forloop.index }}">
        </button>
      {% endfor %}
    </div>
  </div>

  <!-- BACK DESIGN SWATCHES -->
  {% if has_back %}
    <div class="back-designs ryder-cup--custom--blocks">
        <p class="ryder-container--custom">Select Back Design:</p>
        {% for group in ryder_cup %}
        <div class="back-swatches-group {% if forloop.first %}active{% endif %}" data-group-index="{{ forloop.index0 }}">
            {% for back_swatch in group.back_image_for_swatch.value %}
            {% assign x = forloop.index0 %}
            {% for back_image in group.back_image.value %}
                {% assign y = forloop.index0 %}
                {% if x == y %}
                {% assign back_image_match = back_image %}
                <button
                    class="back-swatch {% if x == 0 and forloop.parentloop.index0 == 0 %}active{% endif %}"
                    data-back-image="{{ back_image_match | image_url }}"
                >
                    <img src="{{ back_swatch | img_url: '100x100' }}" alt="Back Swatch {{ x }}">
                </button>
                {% endif %}
            {% endfor %}
            {% endfor %}
        </div>
        {% endfor %}
    </div>
  {% endif %}

  <!-- LEFT SLEEVE DESIGN SWATCHES -->
  {% if has_left_sleeve %}
    <div class="left-sleeve-designs {% if has_left_sleeve %}active{% endif %} ryder-cup--custom--blocks">
      <div class="ryder-container--custom text-container--left-sleeve--custom " data-placement="{{ initial_placement }}">
        SELECT LEFT SLEEVE DESIGN:
      </div>
      <div class="patter-container--left-sleeve--custom" data-block-id="0">
        {% for group in ryder_cup %}
          {% if group.left_sleeve %}
            <div
              class="left-sleeve-button-group-wrapper {% if forloop.first %}active{% endif %}"
              data-group-id="{{ forloop.index0 }}"
              {% unless forloop.index0 == 0 %}style="display: none;"{% endunless %}
            >
              {% for left_sleeve_swatch in group.left_sleeve.value %}
                <button
                  class="button-group--left-sleeve--custom {% if forloop.first and forloop.parentloop.first %}active{% endif %}"
                  data-sleeve-id="{{ forloop.index0 }}"
                  data-block-id="{{ forloop.parentloop.index0 }}"
                  data-image-name="{{ left_sleeve_swatch | image_url | split: 'files/' | last | split: '.' | first }}"
                >
                  <div class="swatch-preview--left-sleeve--custom">
                    {{ left_sleeve_swatch | image_url: width: 100 | image_tag: class: 'img' }}
                  </div>
                </button>
              {% endfor %}
            </div>
          {% endif %}
        {% endfor %}
      </div>
    </div>
  {% endif %}

  <!-- RIGHT SLEEVE DESIGN SWATCHES -->
  {% if has_right_sleeve %}
    <div class="right-sleeve-designs {% if has_right_sleeve %}active{% endif %} ryder-cup--custom--blocks">
      <div class="ryder-container--custom text-container--right-sleeve--custom" data-placement="{{ initial_placement }}">
        SELECT RIGHT SLEEVE DESIGN:
      </div>
      <div class="patter-container--right-sleeve--custom" data-block-id="0">
        {% for group in ryder_cup %}
          {% if group.right_sleeve %}
            <div
              class="right-sleeve-button-group-wrapper {% if forloop.first %}active{% endif %}"
              data-group-id="{{ forloop.index0 }}"
              {% unless forloop.index0 == 0 %}style="display: none;"{% endunless %}
            >
              {% for right_sleeve_swatch in group.right_sleeve.value %}
                <button
                  class="button-group--right-sleeve--custom {% if forloop.first and forloop.parentloop.first %}active{% endif %}"
                  data-sleeve-id="{{ forloop.index0 }}"
                  data-block-id="{{ forloop.parentloop.index0 }}"
                  data-image-name="{{ right_sleeve_swatch | image_url | split: 'files/' | last | split: '.' | first }}"
                >
                  <div class="swatch-preview--right-sleeve--custom">
                    {{ right_sleeve_swatch | image_url: width: 100 | image_tag: class: 'img' }}
                  </div>
                </button>
              {% endfor %}
            </div>
          {% endif %}
        {% endfor %}
      </div>
    </div>
  {% endif %}
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
  const STORAGE_KEY = 'product_selected_designs_v1';

  const defaultState = {
    frontDesign: '',
    backDesign: '',
    leftSleeveDesign: '',
    rightSleeveDesign: '',
    frontPlacement: '',
    backPlacement: '',
    frontSwatchIndex: 0,
    backSwatchIndex: 0,
    leftSleeveSwatchIndex: 0,
    rightSleeveSwatchIndex: 0
  };

  // --- helpers ---
  const $ = (s, root = document) => root.querySelector(s);
  const $$ = (s, root = document) => Array.from(root.querySelectorAll(s));
  const nowCacheBuster = () => `cb=${Date.now()}`;

  function loadState() {
    try {
      const raw = localStorage.getItem(STORAGE_KEY);
      return raw ? Object.assign({}, defaultState, JSON.parse(raw)) : { ...defaultState };
    } catch (e) {
      console.warn('Failed to load state:', e);
      return { ...defaultState };
    }
  }

  function saveState() {
    try {
      localStorage.setItem(STORAGE_KEY, JSON.stringify(state));
    } catch (e) {
      console.warn('Failed to save state:', e);
    }
  }

  function setHiddenValue(selector, value) {
    const el = $(selector);
    if (el) el.value = value;
  }

  function replaceImageElement(imgEl, src) {
    if (!imgEl || !src) return;
    const cacheSrc = src.includes('?') ? `${src}&${nowCacheBuster()}` : `${src}?${nowCacheBuster()}`;
    // Create new Image to avoid leftover listeners/attributes
    const newImg = new Image();
    newImg.src = cacheSrc;
    newImg.className = imgEl.className;
    newImg.loading = imgEl.loading || 'lazy';
    imgEl.parentNode.replaceChild(newImg, imgEl);
  }

  function updateSrcsetForSources(container, baseSrc) {
    if (!container || !baseSrc) return;
    const sources = container.querySelectorAll('source, picture source');
    sources.forEach(source => {
      const srcset = source.getAttribute('srcset') || '';
      // try to preserve width query if exists (width=123)
      const match = srcset.match(/(width=\d+)/);
      const widthPart = match ? match[1] : null;
      const base = baseSrc.split('?')[0];
      const newSrc = widthPart ? `${base}?${widthPart}&${nowCacheBuster()}` : `${base}?${nowCacheBuster()}`;
      source.srcset = newSrc;
    });
  }

  // --- DOM refs (re-query when necessary) ---
  function refs() {
    return {
      frontSwatches: $$('.front-swatch'),
      backGroups: $$('.back-swatches-group'),
      leftSleeveGroups: $$('.left-sleeve-button-group-wrapper'),
      rightSleeveGroups: $$('.right-sleeve-button-group-wrapper'),
      leftSleeveDesigns: $('.left-sleeve-designs'),
      rightSleeveDesigns: $('.right-sleeve-designs'),
      frontDesignInput: '#front-design-input',
      backDesignInput: '#back-design-input',
      leftSleeveDesignInput: '#left-sleeve-design-input',
      rightSleeveDesignInput: '#right-sleeve-design-input',
      frontPlacementInput: '#front-placement-input',
      backPlacementInput: '#back-placement-input',
      desktopImageContainers: $$('.main-product-logo--custom .info-media-stack-wrapper .pdp-media'),
      desktopImages: $$('.main-product-logo--custom .info-media-stack-wrapper .pdp__media-tag'),
      mobileImageContainers: $$('.main-product-logo--custom .pdp-media-sm .main-swiper .swiper-slide .pdp-media-image'),
      thumbImageContainers: $$('.main-product-logo--custom .vertical__medias .pdp-media-v')
    };
  }

  // --- core logic ---
  let state = loadState();

  function applyGroupVisibility(groupIndex) {
    const { leftSleeveDesigns, rightSleeveDesigns } = refs();
    const front = $$('.front-swatch').find(f => f.dataset.groupIndex === groupIndex) || null;
    const hasLeft = front ? front.dataset.hasLeftSleeve === 'true' : false;
    const hasRight = front ? front.dataset.hasRightSleeve === 'true' : false;

    if (leftSleeveDesigns) leftSleeveDesigns.classList.toggle('active', hasLeft);
    if (rightSleeveDesigns) rightSleeveDesigns.classList.toggle('active', hasRight);

    refs().backGroups.forEach(bg => {
      bg.classList.toggle('active', bg.dataset.groupIndex === groupIndex);
      if (bg.dataset.groupIndex !== groupIndex) $$('.back-swatch', bg).forEach(b => b.classList.remove('active'));
    });

    refs().leftSleeveGroups.forEach(lg => {
      const is = lg.dataset.groupId === groupIndex;
      lg.style.display = is ? 'flex' : 'none';
      lg.classList.toggle('active', is);
      if (!is) $$('.button-group--left-sleeve--custom', lg).forEach(b => b.classList.remove('active'));
    });

    refs().rightSleeveGroups.forEach(rg => {
      const is = rg.dataset.groupId === groupIndex;
      rg.style.display = is ? 'flex' : 'none';
      rg.classList.toggle('active', is);
      if (!is) $$('.button-group--right-sleeve--custom', rg).forEach(b => b.classList.remove('active'));
    });
  }

  function restoreUIFromState() {
    const r = refs();
    // front
    if (r.frontSwatches.length) {
      r.frontSwatches.forEach(f => f.classList.remove('active'));
      const fIndex = Math.min(Math.max(0, state.frontSwatchIndex), r.frontSwatches.length - 1);
      const front = r.frontSwatches[fIndex];
      if (front) front.classList.add('active');

      const groupIndex = front ? front.dataset.groupIndex : (r.frontSwatches[0] && r.frontSwatches[0].dataset.groupIndex);
      if (groupIndex) applyGroupVisibility(groupIndex);
    }

    // back
    r.backGroups.forEach(bg => {
      const backButtons = $$('.back-swatch', bg);
      backButtons.forEach(b => b.classList.remove('active'));
      if (bg.dataset.groupIndex === (r.frontSwatches[r.frontSwatches.findIndex(s => s.classList.contains('active'))]?.dataset.groupIndex)) {
        bg.classList.add('active');
        const idx = Math.min(Math.max(0, state.backSwatchIndex), backButtons.length - 1);
        if (backButtons[idx]) backButtons[idx].classList.add('active');
      } else {
        bg.classList.remove('active');
      }
    });

    // left sleeve
    r.leftSleeveGroups.forEach(lg => {
      const buttons = $$('.button-group--left-sleeve--custom', lg);
      buttons.forEach(b => b.classList.remove('active'));
      if (lg.classList.contains('active') && buttons.length) {
        const idx = Math.min(Math.max(0, state.leftSleeveSwatchIndex), buttons.length - 1);
        if (buttons[idx]) buttons[idx].classList.add('active');
      }
    });

    // right sleeve
    r.rightSleeveGroups.forEach(rg => {
      const buttons = $$('.button-group--right-sleeve--custom', rg);
      buttons.forEach(b => b.classList.remove('active'));
      if (rg.classList.contains('active') && buttons.length) {
        const idx = Math.min(Math.max(0, state.rightSleeveSwatchIndex), buttons.length - 1);
        if (buttons[idx]) buttons[idx].classList.add('active');
      }
    });

    updateMainImages(false);
    updateHiddenInputs();
  }

  function updateHiddenInputs() {
    setHiddenValue('#front-design-input', state.frontDesign);
    setHiddenValue('#back-design-input', state.backDesign);
    setHiddenValue('#left-sleeve-design-input', state.leftSleeveDesign);
    setHiddenValue('#right-sleeve-design-input', state.rightSleeveDesign);
    setHiddenValue('#front-placement-input', state.frontPlacement);
    setHiddenValue('#back-placement-input', state.backPlacement);
  }

  function reorderDesktopImages(isBackClicked) {
    const { desktopImageContainers } = refs();
    if (desktopImageContainers.length < 2) return;
    const wrapper = document.querySelector('.info-media-stack-wrapper');
    if (!wrapper) return;
    if (isBackClicked) {
      // put second element first
      const back = desktopImageContainers[1];
      const firstChild = wrapper.firstElementChild;
      if (back && back !== firstChild) wrapper.insertBefore(back, firstChild);
    } else {
      const front = desktopImageContainers[0];
      if (front && front !== wrapper.firstElementChild) wrapper.insertBefore(front, wrapper.firstElementChild);
    }
  }

  function updateMainImages(isBackSwatchClicked = false) {
    const r = refs();
    const activeFront = r.frontSwatches.find(s => s.classList.contains('active')) || null;
    const activeBackGroup = r.backGroups.find(g => g.classList.contains('active')) || null;
    const activeBack = activeBackGroup ? $$('.back-swatch', activeBackGroup).find(b => b.classList.contains('active')) : null;
    const activeLeftSleeve = r.leftSleeveDesigns ? $('.button-group--left-sleeve--custom.active', r.leftSleeveDesigns) : null;
    const activeRightSleeve = r.rightSleeveDesigns ? $('.button-group--right-sleeve--custom.active', r.rightSleeveDesigns) : null;

    // reorder desktop images if needed
    reorderDesktopImages(isBackSwatchClicked);

    // Update front images (desktop/mobile/thumb)
    if (activeFront && activeFront.dataset.frontImage) {
      const src = activeFront.dataset.frontImage;
      if (r.desktopImages[0]) replaceImageElement(r.desktopImages[0], src);
      if (r.mobileImageContainers[0]) {
        const mobileImg = $('.pdp__media-tag', r.mobileImageContainers[0]);
        if (mobileImg) mobileImg.src = src.includes('?') ? `${src}&${nowCacheBuster()}` : `${src}?${nowCacheBuster()}`;
        updateSrcsetForSources(r.mobileImageContainers[0], src);
      }
      if (r.thumbImageContainers[0]) {
        const thumb = r.thumbImageContainers[0].querySelector('.vertical__media');
        if (thumb) thumb.src = src.includes('?') ? `${src}&${nowCacheBuster()}` : `${src}?${nowCacheBuster()}`;
        updateSrcsetForSources(r.thumbImageContainers[0], src);
      }
      // set state values
      state.frontDesign = (activeFront.dataset.frontImage || '').split('files/').pop()?.split('.').shift() || '';
      state.frontPlacement = activeFront.dataset.frontLogoPlacement || '';
      state.frontSwatchIndex = r.frontSwatches.findIndex(s => s === activeFront);
    } else {
      state.frontDesign = '';
      state.frontPlacement = '';
      state.frontSwatchIndex = 0;
    }

    // Update back images
    if (activeBack && activeBack.dataset.backImage) {
      const src = activeBack.dataset.backImage;
      if (r.desktopImages[1]) replaceImageElement(r.desktopImages[1], src);
      if (r.mobileImageContainers[1]) {
        const mobileImg = $('.pdp__media-tag', r.mobileImageContainers[1]);
        if (mobileImg) mobileImg.src = src.includes('?') ? `${src}&${nowCacheBuster()}` : `${src}?${nowCacheBuster()}`;
        updateSrcsetForSources(r.mobileImageContainers[1], src);
      }
      if (r.thumbImageContainers[1]) {
        const thumb = r.thumbImageContainers[1].querySelector('.vertical__media');
        if (thumb) thumb.src = src.includes('?') ? `${src}&${nowCacheBuster()}` : `${src}?${nowCacheBuster()}`;
        updateSrcsetForSources(r.thumbImageContainers[1], src);
      }

      state.backDesign = (activeBack.dataset.backImage || '').split('files/').pop()?.split('.').shift() || '';
      // derive backPlacement based on front placement heuristic from your original logic
      if (state.backDesign && state.frontPlacement) {
        const fp = (state.frontPlacement || '').toLowerCase();
        state.backPlacement = fp === 'chest' ? 'center' : fp === 'center' ? 'top' : '';
      } else {
        state.backPlacement = '';
      }

      // back index
      if (activeBackGroup) {
        const btns = $$('.back-swatch', activeBackGroup);
        state.backSwatchIndex = btns.findIndex(b => b.classList.contains('active'));
      } else state.backSwatchIndex = 0;
    } else {
      state.backDesign = '';
      state.backPlacement = '';
      state.backSwatchIndex = 0;
    }

    // left sleeve
    if (activeLeftSleeve && activeLeftSleeve.dataset.imageName) {
      state.leftSleeveDesign = activeLeftSleeve.dataset.imageName;
      const activeGroup = refs().leftSleeveGroups.find(g => g.classList.contains('active'));
      if (activeGroup) {
        const btns = $$('.button-group--left-sleeve--custom', activeGroup);
        state.leftSleeveSwatchIndex = btns.findIndex(b => b.classList.contains('active'));
      }
    } else {
      state.leftSleeveDesign = '';
      state.leftSleeveSwatchIndex = 0;
    }

    // right sleeve
    if (activeRightSleeve && activeRightSleeve.dataset.imageName) {
      state.rightSleeveDesign = activeRightSleeve.dataset.imageName;
      const activeGroup = refs().rightSleeveGroups.find(g => g.classList.contains('active'));
      if (activeGroup) {
        const btns = $$('.button-group--right-sleeve--custom', activeGroup);
        state.rightSleeveSwatchIndex = btns.findIndex(b => b.classList.contains('active'));
      }
    } else {
      state.rightSleeveDesign = '';
      state.rightSleeveSwatchIndex = 0;
    }

    // update inputs and save
    updateHiddenInputs();
    saveState();

    // Swiper update if present
    const mainSwiper = document.querySelector('.pdp-media-sm .main-swiper');
    if (mainSwiper && typeof Swiper !== 'undefined' && mainSwiper.swiper) {
      try {
        const swiperInstance = mainSwiper.swiper;
        swiperInstance.update();
        swiperInstance.slideTo(isBackSwatchClicked ? 1 : 0);
      } catch (e) {
        console.warn('Swiper update failed', e);
      }
    }
  }

  // --- event handling (delegation) ---
  document.addEventListener('click', (ev) => {
    const front = ev.target.closest('.front-swatch');
    if (front) {
      // front selection
      refs().frontSwatches.forEach(f => f.classList.remove('active'));
      front.classList.add('active');
      state.frontSwatchIndex = refs().frontSwatches.findIndex(f => f === front);

      const groupIndex = front.dataset.groupIndex;
      applyGroupVisibility(groupIndex);

      // ensure there is an active back swatch for the group
      const group = refs().backGroups.find(bg => bg.dataset.groupIndex === groupIndex);
      if (group) {
        const backBtns = $$('.back-swatch', group);
        if (!backBtns.some(b => b.classList.contains('active')) && backBtns.length) {
          backBtns[0].classList.add('active');
          state.backSwatchIndex = 0;
        }
        // deactivate other back groups
        refs().backGroups.forEach(bg => {
          if (bg !== group) bg.classList.remove('active');
        });
        group.classList.add('active');
      }

      // ensure left/right sleeve groups similar behavior
      refs().leftSleeveGroups.forEach(lg => {
        const is = lg.dataset.groupId === groupIndex;
        if (is) {
          lg.style.display = 'flex';
          lg.classList.add('active');
          const leftBtns = $$('.button-group--left-sleeve--custom', lg);
          if (!leftBtns.some(b => b.classList.contains('active')) && leftBtns.length) {
            leftBtns[0].classList.add('active');
            state.leftSleeveSwatchIndex = 0;
          }
        } else {
          lg.style.display = 'none';
          lg.classList.remove('active');
          $$('.button-group--left-sleeve--custom', lg).forEach(b => b.classList.remove('active'));
        }
      });

      refs().rightSleeveGroups.forEach(rg => {
        const is = rg.dataset.groupId === groupIndex;
        if (is) {
          rg.style.display = 'flex';
          rg.classList.add('active');
          const rightBtns = $$('.button-group--right-sleeve--custom', rg);
          if (!rightBtns.some(b => b.classList.contains('active')) && rightBtns.length) {
            rightBtns[0].classList.add('active');
            state.rightSleeveSwatchIndex = 0;
          }
        } else {
          rg.style.display = 'none';
          rg.classList.remove('active');
          $$('.button-group--right-sleeve--custom', rg).forEach(b => b.classList.remove('active'));
        }
      });

      updateMainImages(false);
      return;
    }

    const back = ev.target.closest('.back-swatch');
    if (back) {
      const group = ev.target.closest('.back-swatches-group');
      if (group) {
        // deactivate all back buttons in group and set active
        $$('.back-swatch', group).forEach(b => b.classList.remove('active'));
        back.classList.add('active');
        refs().backGroups.forEach(bg => bg.classList.remove('active'));
        group.classList.add('active');

        state.backSwatchIndex = $$('.back-swatch', group).findIndex(b => b === back);
        updateMainImages(true);
      }
      return;
    }

    const leftBtn = ev.target.closest('.button-group--left-sleeve--custom');
    if (leftBtn) {
      const group = ev.target.closest('.left-sleeve-button-group-wrapper');
      if (group) {
        $$('.button-group--left-sleeve--custom', group).forEach(b => b.classList.remove('active'));
        leftBtn.classList.add('active');
        state.leftSleeveSwatchIndex = $$('.button-group--left-sleeve--custom', group).findIndex(b => b === leftBtn);
        updateMainImages(false);
      }
      return;
    }

    const rightBtn = ev.target.closest('.button-group--right-sleeve--custom');
    if (rightBtn) {
      const group = ev.target.closest('.right-sleeve-button-group-wrapper');
      if (group) {
        $$('.button-group--right-sleeve--custom', group).forEach(b => b.classList.remove('active'));
        rightBtn.classList.add('active');
        state.rightSleeveSwatchIndex = $$('.button-group--right-sleeve--custom', group).findIndex(b => b === rightBtn);
        updateMainImages(false);
      }
      return;
    }
  });

  // Listen for variant changes from theme/app and re-initialize references and UI
  document.addEventListener('variant:change', () => {
    // re-query and restore UI (state preserved)
    restoreUIFromState();
  });

  // initial setup: if no front active, activate first and set state
  (function init() {
    const r = refs();
    if (!r.frontSwatches.length) {
      console.error('No front swatches found');
      return;
    }
    if (!r.frontSwatches.some(s => s.classList.contains('active'))) {
      r.frontSwatches[0].classList.add('active');
      state.frontSwatchIndex = 0;
      const fi = r.frontSwatches[0];
      const groupIndex = fi.dataset.groupIndex;
      applyGroupVisibility(groupIndex);
      // pick first back if exists
      const matchingBackGroup = r.backGroups.find(bg => bg.dataset.groupIndex === groupIndex);
      if (matchingBackGroup) {
        matchingBackGroup.classList.add('active');
        const backBtns = $$('.back-swatch', matchingBackGroup);
        if (backBtns.length) {
          backBtns[0].classList.add('active');
          state.backSwatchIndex = 0;
        }
      }
      // pick first left/right sleeve if present
      r.leftSleeveGroups.forEach(lg => {
        if (lg.dataset.groupId === groupIndex) {
          lg.style.display = 'flex';
          lg.classList.add('active');
          const leftBtns = $$('.button-group--left-sleeve--custom', lg);
          if (leftBtns.length) leftBtns[0].classList.add('active');
        } else {
          lg.style.display = 'none';
        }
      });
      r.rightSleeveGroups.forEach(rg => {
        if (rg.dataset.groupId === groupIndex) {
          rg.style.display = 'flex';
          rg.classList.add('active');
          const rightBtns = $$('.button-group--right-sleeve--custom', rg);
          if (rightBtns.length) rightBtns[0].classList.add('active');
        } else {
          rg.style.display = 'none';
        }
      });
    }

    // restore from existing state (localStorage)
    restoreUIFromState();
  })();

});

</script>