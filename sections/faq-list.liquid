{{ 'faq-list.css' | asset_url | stylesheet_tag }}
{% liquid
  assign id = section.id
%}

<style>
  .section-container--{{ id }}{
    margin-top: {{ section.settings.margin_top | append:'px' }};
    margin-bottom: {{ section.settings.margin_bottom | append:'px' }};
    padding-top: {{ section.settings.padding_top | append:'px' }};
    padding-bottom: {{ section.settings.padding_bottom | append:'px' }};
    background-color: {{ section.settings.bg-color }};
    overflow: hidden;
  }
  @media screen and (max-width: 768px){
    .section-container--{{ id }}{
      margin-top: {{ section.settings.margin_top_mobile | append:'px' }};
      margin-bottom: {{ section.settings.margin_bottom_mobile | append:'px'  }};
      padding-top: {{ section.settings.padding_top_mobile | append:'px' }};
      padding-bottom: {{ section.settings.padding_bottom_mobile | append:'px' }};
    }
  }
  .section-container--{{ id }}{
    /* .main {
      display: grid;
      grid-template-columns: minmax(0px, 1fr) minmax(0px, 1.5fr);
      grid-gap: 40px;
      @media(max-width: 786px){
        grid-template-columns: minmax(0px, 1fr);
        grid-gap: 0;
      }
    } */

  }
</style>
<section class="section-container--{{ id }}">
  <div class="section-wrapper--{{ id }} {% unless section.settings.full_width %}page-width{% endunless %}">
    <div class="main">
      <div class="info">
        <h2 class="heading">{{ section.settings.heading }}</h2>
      </div>
      <div class="accordion-wrapper">
        
        <div class="accordion-wrapper-first--abc accordion-wrapper--custom">
          {% for block in section.blocks %}
            {% if block.type == 'item' %}
              <div class="accordion--custom">
                <div class="acr-title">
                  <h4 class="faq-question">{{ block.settings.title }}</h4>
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24">
                    <path
                        d="M12 15.59l-5.3-5.3a1.004 1.004 0 0 0-1.42 1.42l6 6a1.004 1.004 0 0 0 1.41 0l6-6a1.004 1.004 0 0 0-1.42-1.42L12 15.59z" />
                  </svg>
                </div>
                <div class="acr-content">
                  <p>
                    {{ block.settings.text }}
                  </p>
                </div>
              </div>
            {% endif %}
          {% endfor %}
        </div>
                      
        <div class="accordion-wrapper-second--xyz accordion-wrapper--custom">
          {% for block in section.blocks %}
            {% if block.type == 'item_2' %}
              <div class="accordion--custom">
                <div class="acr-title">
                  <h4 class="faq-question">{{ block.settings.title_2 }}</h4>
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24">
                    <path
                        d="M12 15.59l-5.3-5.3a1.004 1.004 0 0 0-1.42 1.42l6 6a1.004 1.004 0 0 0 1.41 0l6-6a1.004 1.004 0 0 0-1.42-1.42L12 15.59z" />
                  </svg>
                </div>
                <div class="acr-content">
                  <p>
                    {{ block.settings.text_2 }}
                  </p>
                </div>
              </div>
            {% endif %}
          {% endfor %}
        </div>
                      
      </div>
    </div>
  </div>
</section>

<script>
// Accordion Setup
class Accordioncustom {
  constructor(accordion = '', newOptions) {
    let options = {
      initOpenIndex: 1,
      closeAll: true,
      duration: 400,
      activeClass: 'active',
      globalClose: true,
      isFirstAccordion: false
    }
    this.options = { ...options, ...newOptions }
    this.accordions = document.querySelectorAll(accordion)

    this.accordions.forEach((accordion, index) => {
      this.initAccordion(accordion, index)
    })
  }

  initAccordion(accordion, accordionIndex) {
    const tabItemsArray = Array.from(accordion.children)

    if (this.options.initOpenIndex > tabItemsArray.length) {
      this.options.initOpenIndex = tabItemsArray.length
    }

    tabItemsArray.forEach((tabElement, index) => {
      let item = this.getAccordionItems(tabElement)
      this.contentInitialHeight(item[1])

      if (index === this.options.initOpenIndex - 1 && this.options.isFirstAccordion) {
        this.InitialOpen(item)
      } else {
        this.close(item)
      }

      item[0].addEventListener('click', () => {
        this.toggle(tabItemsArray, item)
      })
    })
  }

  getAccordionItems(accordion) {
    let title = accordion.children[0]
    let content = accordion.children[1]
    return [title, content]
  }

  contentInitialHeight(content) {
    content.style.height = "0px"
    content.style.overflow = 'hidden'
  }

  InitialOpen(item) {
    this.setActiveClass(item)
    this.open(item)
  }

  open(item) {
    let content = item[1]
    this.transition(content)
    content.style.height = `${content.scrollHeight}px`
  }

  close(item) {
    let content = item[1]
    content.style.height = "0px"
  }

  toggle(tabItemsArray, item) {
    const isOpen = item[1].style.height !== "0px"

    if (this.options.globalClose) {
      document.querySelectorAll('.accordion--custom').forEach(tabItem => {
        let itemToClose = this.getAccordionItems(tabItem)
        this.close(itemToClose)
        this.removeActiveClass(itemToClose)
      })
    } else {
      tabItemsArray.forEach(tabItem => {
        let itemToClose = this.getAccordionItems(tabItem)
        this.close(itemToClose)
        this.removeActiveClass(itemToClose)
      })
    }

    if (!isOpen) {
      this.setActiveClass(item)
      this.open(item)
    }
  }

  transition(el) {
    el.style.transition = `all ${this.options.duration}ms ease`
  }

  setActiveClass(item) {
    item[1].parentElement.classList.add(this.options.activeClass)
  }

  removeActiveClass(item) {
    item[1].parentElement.classList.remove(this.options.activeClass)
  }
}

// Initialize accordions
new Accordioncustom('.accordion-wrapper-first--abc', {
  initOpenIndex: 1,
  duration: 700,
  activeClass: 'active',
  globalClose: true,
  isFirstAccordion: true
})
new Accordioncustom('.accordion-wrapper-second--xyz', {
  initOpenIndex: 1,
  duration: 700,
  activeClass: 'active',
  globalClose: true,
  isFirstAccordion: false
})

// Search Functionality
document.getElementById("faqSearchInput").addEventListener("input", function () {
  const query = this.value.toLowerCase().trim();
  const faqs = document.querySelectorAll(".accordion--custom");

  faqs.forEach(faq => {
    const question = faq.querySelector(".faq-question")?.innerText.toLowerCase() || '';
    const answer = faq.querySelector(".acr-content")?.innerText.toLowerCase() || '';
    const combinedText = question + " " + answer;

    if (combinedText.includes(query)) {
      faq.style.display = "";
    } else {
      faq.style.display = "none";
    }
  });
});
</script>


{% schema %}
{
  "name": "FAQ List",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "FAQ"
    },
    {
      "type": "checkbox",
      "id": "full_width",
      "label": "Full Width Section",
      "default": true
    },
    {
      "type": "color",
      "id": "bg-color",
      "label": "Background Color"
    },
    {
      "type": "header",
      "content": "Desktop Spacing"
    },
    {
      "type": "range",
      "id": "margin_top",
      "min": 0,
      "max": 200,
      "step": 2,
      "unit": "px",
      "label": "Margin Top",
      "default": 0
    },
    {
      "type": "range",
      "id": "margin_bottom",
      "min": 0,
      "max": 200,
      "step": 2,
      "unit": "px",
      "label": "Margin Bottom",
      "default": 0
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 200,
      "step": 2,
      "unit": "px",
      "label": "Padding Top",
      "default": 50
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 200,
      "step": 2,
      "unit": "px",
      "label": "Padding Bottom",
      "default": 50
    },
    {
      "type": "header",
      "content": "Mobile Spacing"
    },
    {
      "type": "range",
      "id": "margin_top_mobile",
      "min": 0,
      "max": 200,
      "step": 2,
      "unit": "px",
      "label": "Margin Top (Mobile)",
      "default": 0
    },
    {
      "type": "range",
      "id": "margin_bottom_mobile",
      "min": 0,
      "max": 200,
      "step": 2,
      "unit": "px",
      "label": "Margin Bottom (Mobile)",
      "default": 0
    },
    {
      "type": "range",
      "id": "padding_top_mobile",
      "min": 0,
      "max": 200,
      "step": 2,
      "unit": "px",
      "label": "Padding Top  (Mobile)",
      "default": 20
    },
    {
      "type": "range",
      "id": "padding_bottom_mobile",
      "min": 0,
      "max": 200,
      "step": 2,
      "unit": "px",
      "label": "Padding Bottom  (Mobile)",
      "default": 20
    }
  ],
  "blocks": [
     {
       "name": "Item",
       "type": "item",
       "settings": [
          {
            "type": "text",
            "id": "title",
            "label": "Title"
          },
          {
            "type": "richtext",
            "id": "text",
            "label": "Text"
          }
       ]
     },
     {
       "name": "Item 2",
       "type": "item_2",
       "settings": [
          {
            "type": "text",
            "id": "title_2",
            "label": "Title"
          },
          {
            "type": "richtext",
            "id": "text_2",
            "label": "Text"
          }
       ]
     }
   ],
  "presets": [
    {
      "name": "FAQ List"
    }
  ]
}
{% endschema %}
